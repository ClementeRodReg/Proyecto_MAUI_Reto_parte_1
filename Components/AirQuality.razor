<h3>AirQuality</h3>

@using System.Globalization;
@using Proyecto_MAUI_Reto_parte_1.Models;
@using System.Net.Http.Json;

<div class="input-group mb-5 mt-5">
    <input class="form-control" type="text" @bind=city placeholder="City Name" />
    <div>
        <button class="btn btn-outline-secondary" @onclick=GetAirQuality type="button">Search</button>
    </div>
</div>


@if (!error)
{
    @if (airQualityData != null)
    {
        <div class="text-center">
            <p class="display-2">@city</p>
        </div>

        @if (cityData != null && cityData.results.Length > 0)
        {
            @foreach (Result city in cityData.results)
            {
                <button @onclick="()=>NewGetAirQuality(city.lat, city.lon)" class="btn btn-outline-primary" type="button">@city.formatted</button>
                
            }

        }
        
        @for (int d = 0; d < 4; d++)
        {   
            <h2>@DateTime.Now.AddDays(d).ToString("dd/MM/yyyy")</h2>
            <div class="card-group" style="display:flex;align-items: center;justify-content: center">
                @for (int i = 0; i < horas.Count; i++)
                {
                    @if(horas[0] > 100)
                    {
                        horas = new List<int> { 6, 9, 12, 15, 18, 21 };
                    }
                    <AirCualityCard time="@airQualityData.hourly.time[horas[i]].Split("T")[1]"
                                    pm10="@airQualityData.hourly.pm10[horas[i]]"
                                    pm2_5="@airQualityData.hourly.pm2_5[horas[i]]"
                                    carbon_monoxide="@airQualityData.hourly.carbon_monoxide[horas[i]]"
                                    ozone="@airQualityData.hourly.ozone[horas[i]]"
                                    european_aqi="@airQualityData.hourly.european_aqi[horas[i]]"></AirCualityCard>
                    horas[i] = horas[i] + 24;
                }
            </div>
            <br />
        }
    }

}


@code {
    string city = "";
    string visible = "";
    float lat;
    float lon;
    List<int> horas = new List<int> { 6, 9, 12, 15, 18, 21 };
    Boolean error = false;
    AirQualityModel? airQualityData;
    List<String>? ListaPaises;
    CityData cityData;
    HttpClient Client = new HttpClient();

    async Task GetAirQuality()
    {
        cityData = await GetCityData();//aqui conseguimos la latitud y longitud de la ciudad
        lat = cityData.results[0].lat;
        lon = cityData.results[0].lon;
        ListaPaises = new List<string>();
        for (int i = 0; i < cityData.results.Length; i++)
        {
            ListaPaises.Add(cityData.results[i].formatted);
        }
        try
        {
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");
            airQualityData = await Client.GetFromJsonAsync<AirQualityModel>(EndPoint.GetAirEndPoint(lat, lon));
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-ES");
            error = false;
        }
        catch (Exception ex)
        {
            error = true;
        }
    }

    async Task<CityData> GetCityData()
    {
        var cityData2 = await Client.GetFromJsonAsync<CityData>(EndPoint.GetGeoApifyEndPoint(city));
        return cityData2;
    }

    async Task NewGetAirQuality(float lat, float lon)
    {
        try
        {
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");
            airQualityData = await Client.GetFromJsonAsync<AirQualityModel>(EndPoint.GetAirEndPoint(lat, lon));
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-ES");
        }
        catch (Exception ex)
        {
            error = true;
        }
    }

}